package helper

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_StringMatrixToIntMatrix_ShouldConvertMatrixCorrectly(t *testing.T) {
	stringMatrix := [9][9]string{
		{"1", "0", "0", "0", "0", "0", "0", "0", "0"},
		{"0", "2", "0", "0", "0", "0", "0", "0", "0"},
		{"0", "0", "3", "0", "0", "0", "0", "0", "0"},
		{"0", "0", "0", "4", "0", "0", "0", "0", "0"},
		{"0", "0", "0", "0", "5", "0", "0", "0", "0"},
		{"0", "0", "0", "0", "0", "6", "0", "0", "0"},
		{"0", "0", "0", "0", "0", "0", "7", "0", "0"},
		{"0", "0", "0", "0", "0", "0", "0", "8", "0"},
		{"0", "0", "0", "0", "0", "0", "0", "0", "9"},
	}
	intMatrix := StringMatrixToIntMatrix(stringMatrix)
	expectedIntMatrix := [9][9]int{
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 2, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 3, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 4, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 5, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 6, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 7, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 8, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 9},
	}
	assert.Equal(t, expectedIntMatrix, intMatrix)
}

func Test_IntMatrixToStringMatrix_ShouldConvertMatrixCorrectly(t *testing.T) {
	intMatrix := [9][9]int{
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 2, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 3, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 4, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 5, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 6, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 7, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 8, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 9},
	}
	stringMatrix := IntMatrixToStringMatrix(intMatrix)
	expectedStringMatrix := [9][9]string{
		{"1", "0", "0", "0", "0", "0", "0", "0", "0"},
		{"0", "2", "0", "0", "0", "0", "0", "0", "0"},
		{"0", "0", "3", "0", "0", "0", "0", "0", "0"},
		{"0", "0", "0", "4", "0", "0", "0", "0", "0"},
		{"0", "0", "0", "0", "5", "0", "0", "0", "0"},
		{"0", "0", "0", "0", "0", "6", "0", "0", "0"},
		{"0", "0", "0", "0", "0", "0", "7", "0", "0"},
		{"0", "0", "0", "0", "0", "0", "0", "8", "0"},
		{"0", "0", "0", "0", "0", "0", "0", "0", "9"},
	}
	assert.Equal(t, expectedStringMatrix, stringMatrix)
}

func Test_BuildResponse_ShouldSetMatrixIfSudokuIsSolved(t *testing.T) {
	solved := true
	matrix := [9][9]int{
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 2, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 3, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 4, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 5, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 6, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 7, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 8, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 9},
	}
	response := BuildResponse(solved, matrix)
	expectedResponse := "{\"Status\":true,\"Matrix\":[[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"2\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"3\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"4\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"5\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"6\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"7\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"8\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"9\"]],\"Error\":\"\"}"
	assert.Equal(t, expectedResponse, response)
}

func Test_BuildResponse_ShouldSetErrorIfSudokuIsNotSolved(t *testing.T) {
	solved := false
	matrix := [9][9]int{
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 2, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 3, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 4, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 5, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 6, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 7, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 8, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 9},
	}
	response := BuildResponse(solved, matrix)
	expectedResponse := "{\"Status\":false,\"Matrix\":[[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]],\"Error\":\"This sudoku can't be solved; Check it and try again\"}"
	assert.Equal(t, expectedResponse, response)
}
